<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Potter&#39;s Blog</title>
  
  <subtitle>努力成为更强大的自己</subtitle>
  <link href="https://yanxuewen.cn/atom.xml" rel="self"/>
  
  <link href="https://yanxuewen.cn/"/>
  <updated>2020-10-31T09:10:46.729Z</updated>
  <id>https://yanxuewen.cn/</id>
  
  <author>
    <name>Potter</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python-01：Python与C# 基本语法区别</title>
    <link href="https://yanxuewen.cn/2020/10/31/Python01/"/>
    <id>https://yanxuewen.cn/2020/10/31/Python01/</id>
    <published>2020-10-31T02:35:52.560Z</published>
    <updated>2020-10-31T09:10:46.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最明显的区别"><a href="#最明显的区别" class="headerlink" title="最明显的区别"></a>最明显的区别</h3><ol><li>Python if、for、while等 包裹代码块不是用{}，而是使用”:”和 换行缩进</li><li>Python 弱类型语言，同时每句话结束后无需加分号”;”，与JAVAScript 类似</li></ol><h3 id="具体语法区别："><a href="#具体语法区别：" class="headerlink" title="具体语法区别："></a>具体语法区别：</h3><ul><li>if<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C#：</span><br><span class="line">if(条件)&#123;</span><br><span class="line">    print(&quot;xxx&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">if 条件:</span><br><span class="line">    print(&quot;xxx&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>for<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C#:</span><br><span class="line">var list &#x3D; new List&lt;int&gt;()&#123;1, 2, 3&#125;;</span><br><span class="line">foreach(n : list)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">list &#x3D; &#123;1, 2, 3&#125;</span><br><span class="line">for n in list:</span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure></li><li>强制类型转换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C# </span><br><span class="line">var num &#x3D; &quot;12&quot;;</span><br><span class="line">int n &#x3D; (int)num</span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line">num &#x3D; &quot;12&quot;</span><br><span class="line">n &#x3D; int(num)</span><br></pre></td></tr></table></figure></li><li><p>数组切片： 其实就是copy出数组中的指定区域元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listnames &#x3D; [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]</span><br><span class="line">listnames[start_index:end_index] </span><br><span class="line">(注意：copy出来的集合为[start_index,end_index)之前的元素</span><br></pre></td></tr></table></figure></li><li><p>函数及注释说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C#：</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 测试函数</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public string test(string username)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;hello &quot; + username);</span><br><span class="line">    return username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Python:</span><br><span class="line">def test(username):</span><br><span class="line">    &quot;&quot;&quot;测试函数&quot;&quot;&quot;</span><br><span class="line">    print(&quot;hello &quot; + username)</span><br><span class="line">    return username.title()</span><br></pre></td></tr></table></figure></li><li>传递任意数量的实参：*实参名 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C#：无对应语法</span><br><span class="line"></span><br><span class="line">Python</span><br><span class="line">def make_pizza(*toppings): </span><br><span class="line">    &quot;&quot;&quot;打印顾客点的所有配料&quot;&quot;&quot; </span><br><span class="line">    print(toppings)</span><br></pre></td></tr></table></figure><blockquote><p>注意：任意数量实参只能有一个，并且只能放在函数最后一个参数位置</p></blockquote></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;最明显的区别&quot;&gt;&lt;a href=&quot;#最明显的区别&quot; class=&quot;headerlink&quot; title=&quot;最明显的区别&quot;&gt;&lt;/a&gt;最明显的区别&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Python if、for、while等 包裹代码块不是用{}，而是使用”:”和 换行缩进&lt;/l</summary>
      
    
    
    
    
    <category term="Python" scheme="https://yanxuewen.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试-02：实践</title>
    <link href="https://yanxuewen.cn/2020/10/22/AutoTest02/"/>
    <id>https://yanxuewen.cn/2020/10/22/AutoTest02/</id>
    <published>2020-10-22T09:13:40.499Z</published>
    <updated>2020-10-26T02:02:16.891Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li>Appium 环境<ul><li>安装：Appium Desktop (Server) <a href="https://github.com/appium/appium-desktop/releases">下载地址</a></li><li>安装：Appium-Python-Client (Client) <a href="https://pypi.org/project/Appium-Python-Client/">教程</a></li></ul></li><li>Android 环境：<ul><li>下载安装JDK <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">下载地址</a></li><li>下载Android SDK <a href="https://developer.android.com/studio">下载地址</a></li><li>配置JAVA和Android环境变量 <a href="https://www.jianshu.com/p/a9e80bb782af">教程</a></li></ul></li><li>Python 环境：<ul><li>首先：<a href="https://www.python.org/downloads/">下载安装Python</a></li><li>此次：安装Appium Python库, 命令: pip install -U Appium-Python-Client—python <a href="https://pypi.org/project/Appium-Python-Client/">安装教程</a></li><li>最后：安装Python IDE <a href="https://www.jetbrains.com/pycharm/download/#section=windows">pycharm下载</a></li></ul></li><li>夜神模拟器：<a href="https://www.yeshen.com/">下载安装</a></li></ul><h3 id="Android-APP-测试"><a href="#Android-APP-测试" class="headerlink" title="Android APP 测试"></a>Android APP 测试</h3><ul><li><p>常用命令：</p><ul><li>获取联机设备名称：adb devices</li><li>与设备建立连接：adb connect ip:port (提示：使用adb devices 显示设备的ip和端口)</li><li><p>获取APP包名和启动名：adb shell dumpsys window  windows | findstr mFocusedApp (提示：使用模拟器或手机,打印需测试的APP 保持显示在当前屏幕后，在cmd中输入此命令回车，假如输出结果如下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  adb shell dumpsys window  windows | findstr mFocusedApp</span><br><span class="line">mFocusedApp&#x3D;AppWindowToken&#123;e84eb4f token&#x3D;Token&#123;1260a29 ActivityRecord&#123;16e4bb0 u0 com.guide.custom&#x2F;com.anyapps.Activity.AALaunch t12&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">包名：com.guide.custom</span><br><span class="line">启动Activity名：com.anyapps.Activity.AALaunch</span><br></pre></td></tr></table></figure></li></ul></li><li><p>调试步骤：</p><ol><li>启动夜神模拟器，获取相关信息<ul><li>获取设备号IP和Port: cmd-&gt;adb devices (如果不显示请检查环境配置)</li><li>与设备建立连接：adb connect 127.0.0.1:62001</li><li>系统版本：系统应用-&gt;设置-&gt;版本</li></ul></li><li>打开程序包(拿系统Setting打比方)，获取包名和启动Activity名：adb shell dumpsys window  windows | findstr</li><li>启动Appium，创建Server&lt;-&gt;会话<ul><li>Start Server -&gt; 点击搜索图标 -&gt; 根据1、2获取信息，填写对应信息，我的如下<br><img data-src="https://github.com/aa4790139/BlogPicBed/blob/master/img/20201025-001.png?raw=true" alt=""></li><li>创建会话成功后，效果图如下：(此时可以获取原生布局元素了)<br><img data-src="https://github.com/aa4790139/BlogPicBed/blob/master/img/20201025224614.png?raw=true" alt=""></li></ul></li></ol></li></ul><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul><li><a href="https://www.51zxw.net/list.aspx?page=2&amp;cid=670#!fenye=2">Appium自动化测试教程</a></li><li><a href="http://appium.io/docs/cn/writing-running-appium/caps/index.html">Appium 参数说明</a></li></ul><blockquote><p>最后：其他平台APP调试应该类似，以后再尝试吧 ~</p></blockquote><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Appium 环境&lt;ul&gt;
&lt;li&gt;安装：Appium Desktop (Server) &lt;a href=&quot;ht</summary>
      
    
    
    
    <category term="自动化测试" scheme="https://yanxuewen.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://yanxuewen.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>自动化测试-01：了解</title>
    <link href="https://yanxuewen.cn/2020/10/16/AutoTest01/"/>
    <id>https://yanxuewen.cn/2020/10/16/AutoTest01/</id>
    <published>2020-10-16T02:08:48.893Z</published>
    <updated>2020-10-16T02:15:15.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="测试内容分类"><a href="#测试内容分类" class="headerlink" title="测试内容分类"></a>测试内容分类</h3><ul><li>从软件测试的实践过程看：单元测试、集成测试、确认测试、系统测试、验收测试</li><li>从软件测试的方法策略看：白盒测试、黑盒测试、灰盒测试</li><li>从软件测试的测试视角看：功能测试、性能测试、兼容性测试、安全测试、探索性测试</li><li>从软件测试的技术程度看：手工测试、自动化测试、测试开发</li></ul><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ul><li>Python/PHP/Java/C#/JavaScprit/Ruby + Selenium/Appium + 单元测试框架：开源功能自动化测试方案</li><li>Python + Macaca：阿里巴巴  自动化测试方案</li><li>JavaScript + TestCafe，DevExpress： 开源功能自动化测试方案</li><li>Python/Java/C#/JavaScprit/Ruby + Gauge： 一款开源的功能自动化测试方案</li><li>JavaScript + Postman：免费的Web接口功能自动化测试</li><li>Groovy + SoapUI：开源的Web接口功能自动化测试方案</li><li>更多<ul><li>selenium：<a href="http://www.selenium.org.cn/category/use">web测试工具</a></li><li>appium: web、原生、混合应用都能测试</li></ul></li></ul><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><ul><li><a href="https://www.51zxw.net/list.aspx?page=2&amp;cid=670">Appium自动化测试视频教程</a></li><li><a href="https://sutune.me/2018/04/15/appium/">Appium简介</a></li><li><a href="https://hllgithub.github.io/2018/09/09/Appium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/">Appium自动化测试介绍和使用说明</a></li><li><a href="http://www.selenium.org.cn/category/use">selenium</a></li><li><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">selenium + python 中文文档</a></li><li><a href="https://macacajs.github.io/zh/guide/#%E9%9B%86%E6%88%90%E5%92%8C%E8%9E%8D%E5%90%88">Macaca</a></li><li><a href="https://yq.aliyun.com/articles/398697">Macaca-iOS入门那些事</a></li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/36896449">一分钟了解自动化测试</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;测试内容分类&quot;&gt;&lt;a href=&quot;#测试内容分类&quot; class=&quot;headerlink&quot; title=&quot;测试内容分类&quot;&gt;&lt;/a&gt;测试内容分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从软件测试的实践过程看：单元测试、集成测试、确认测试、系统测试、验收测试&lt;/li&gt;
&lt;li&gt;从软</summary>
      
    
    
    
    <category term="自动化测试" scheme="https://yanxuewen.cn/categories/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="测试" scheme="https://yanxuewen.cn/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>屏蔽：键盘按键、鼠标点击事件</title>
    <link href="https://yanxuewen.cn/2020/10/14/PreventEvent/"/>
    <id>https://yanxuewen.cn/2020/10/14/PreventEvent/</id>
    <published>2020-10-14T03:05:04.161Z</published>
    <updated>2020-10-14T03:43:04.239Z</updated>
    
    <content type="html"><![CDATA[<h3 id="屏蔽-键盘按键"><a href="#屏蔽-键盘按键" class="headerlink" title="屏蔽-键盘按键"></a>屏蔽-键盘按键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;添加按键监听</span><br><span class="line">window.addEventListener(&#39;keydown&#39;, this.onKeyDown,true);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;移除按键监听</span><br><span class="line">window.removeEventListener(&quot;keydown&quot;,this.onKeyDown,true);</span><br><span class="line"></span><br><span class="line">onKeyDown(val)&#123;</span><br><span class="line">    console.log(&#39;按下&#39; + val.key);</span><br><span class="line">    val.preventDefault();</span><br><span class="line">    val.stopPropagation();</span><br><span class="line">    val.cancelBubble &#x3D; true;</span><br><span class="line">    window.event.returnValue &#x3D; false;</span><br><span class="line">    window.event.preventDefault();</span><br><span class="line">    window.event.stopPropagation();</span><br><span class="line">    window.event.cancelBubble &#x3D; true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏蔽-鼠标点击"><a href="#屏蔽-鼠标点击" class="headerlink" title="屏蔽-鼠标点击"></a>屏蔽-鼠标点击</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;添加鼠标点击监听</span><br><span class="line">window.addEventListener(&#39;mousedown&#39;,this.onClick,true);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;移除鼠标点击监听</span><br><span class="line">window.removeEventListener(&#39;mousedown&#39;,this.onClick,true);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;which: 1-左键 2-中键 3-右键</span><br><span class="line">onClick(val)&#123;</span><br><span class="line">    console.error(&#39;点击&#39; + val.which);</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏蔽-BackSpace"><a href="#屏蔽-BackSpace" class="headerlink" title="屏蔽-BackSpace"></a>屏蔽-BackSpace</h3><p>在IE页面跳转过程中，按BackSpace退格键默认返回上此浏览页，导致路由中断引起(Vue)页面卡死，所以需要在IE中屏蔽掉BackSpce退格键，但是在输入框中则不屏蔽。</p><ul><li>preventBackSpce.js： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">export const banBackSpace &#x3D; (e) &#x3D;&gt; &#123;</span><br><span class="line">  let ev &#x3D; e || window.event</span><br><span class="line">  &#x2F;&#x2F; 各种浏览器下获取事件对象</span><br><span class="line">  let obj &#x3D; ev.relatedTarget || ev.srcElement || ev.target || ev.currentTarget</span><br><span class="line">  &#x2F;&#x2F; 按下Backspace键</span><br><span class="line">  if (ev.keyCode &#x3D;&#x3D;&#x3D; 8) &#123;</span><br><span class="line">    &#x2F;&#x2F; 标签名称</span><br><span class="line">    let tagName &#x3D; obj.nodeName.toLowerCase();</span><br><span class="line">    &#x2F;&#x2F; 如果标签不是input或者textarea则阻止Backspace</span><br><span class="line">    if (tagName !&#x3D;&#x3D; &#39;input&#39; &amp;&amp; tagName !&#x3D;&#x3D; &#39;textarea&#39;) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">    let tagType &#x3D; obj.type.toLowerCase() &#x2F;&#x2F; 标签类型</span><br><span class="line">    &#x2F;&#x2F; input标签除了下面几种类型，全部阻止Backspace</span><br><span class="line">    if (tagName &#x3D;&#x3D;&#x3D; &#39;input&#39; &amp;&amp; (tagType !&#x3D;&#x3D; &#39;text&#39; &amp;&amp; tagType !&#x3D;&#x3D; &#39;textarea&#39; &amp;&amp; tagType !&#x3D;&#x3D; &#39;password&#39;)) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; input或者textarea输入框如果不可编辑则阻止Backspace</span><br><span class="line">    if ((tagName &#x3D;&#x3D;&#x3D; &#39;input&#39; || tagName &#x3D;&#x3D;&#x3D; &#39;textarea&#39;) &amp;&amp; (obj.readOnly &#x3D;&#x3D;&#x3D; true || obj.disabled &#x3D;&#x3D;&#x3D; true)) &#123;</span><br><span class="line">      return stopIt(ev)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function stopIt(ev) &#123;</span><br><span class="line">  if (ev.preventDefault) &#123;</span><br><span class="line">    &#x2F;&#x2F; preventDefault()方法阻止元素发生默认的行为</span><br><span class="line">    ev.preventDefault()</span><br><span class="line">  &#125;</span><br><span class="line">  if (ev.returnValue) &#123;</span><br><span class="line">    &#x2F;&#x2F; IE浏览器下用window.event.returnValue &#x3D; false;实现阻止元素发生默认的行为</span><br><span class="line">  &#125;</span><br><span class="line">  return false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用方法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 在需要使用的Vue页面引入组件(一般在main.vue中添加)</span><br><span class="line">import &#123;banBackSpace&#125; from &quot;@&#x2F;util&#x2F;preventBackspace&quot;;</span><br><span class="line"></span><br><span class="line">2. mounted 钩子函数挂载事件</span><br><span class="line">document.onkeypress &#x3D; banBackSpace;</span><br><span class="line">document.onkeydown &#x3D; banBackSpace;</span><br></pre></td></tr></table></figure></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;屏蔽-键盘按键&quot;&gt;&lt;a href=&quot;#屏蔽-键盘按键&quot; class=&quot;headerlink&quot; title=&quot;屏蔽-键盘按键&quot;&gt;&lt;/a&gt;屏蔽-键盘按键&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="H5" scheme="https://yanxuewen.cn/categories/H5/"/>
    
    
    <category term="事件屏蔽" scheme="https://yanxuewen.cn/tags/%E4%BA%8B%E4%BB%B6%E5%B1%8F%E8%94%BD/"/>
    
  </entry>
  
  <entry>
    <title>全栈学习-开篇-001</title>
    <link href="https://yanxuewen.cn/2020/09/29/LearningFullStack01/"/>
    <id>https://yanxuewen.cn/2020/09/29/LearningFullStack01/</id>
    <published>2020-09-29T03:49:31.524Z</published>
    <updated>2020-09-29T03:47:56.858Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>起因：在网上搜索了挺久，都没找到让我很满意的项目学习，也买了好几个付费项目，看了一部分就会发现看不下去，发现很多问题，虽然说能学到一部分东西，但感觉这些项目只是为了快速赚钱搞的，项目结构不清晰、缺少项目相关的介绍文档、前后端项目代码不分离，代码也写的非常临时和随意等等，可能我要求过高了。我如果用这种方式去做一个正式商业化的项目，用这种态度搞出来的东西肯定做不大。说实话我以前做东西也很随意，但自从我读了《程序员修炼之道》这本书后(若想成为一名真正的程序员，一定要去好好阅读这边书，去吸收点灵气)，让我受益匪浅。要想成为一个好的工程师，就要约束好自己，做事情不要太随意，得有点工匠精神，像匠人一样打造自己的武器，一段时间后你会发现自己层次上了一个阶梯。为了提升下自己全栈方便的能力，选择了我慕客上购买的一个小项目，这个小项目很适合入手，所以就拿这个项目(简版-慕客商城)开启全栈学习之旅。</p></blockquote><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ol><li><p>前端</p><ul><li>Vue - 2.2.6</li><li>vue-cookie - 1.1.4</li><li>vue-resource - 1.3.1</li><li>vue-router - 2.3.1</li><li>vuex - 2.3.1</li></ul></li><li><p>后端</p><ul><li>Node.js - 12.13.1</li><li>Express - 4.14.1</li><li>Mongoose - 5.0.1</li><li>Mongodb - 4.2.8</li></ul></li></ol><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>WebStorm - 2020.1 (方便后端调试，对比VScode、SublimeText、HBuildX 这IDE功能更强大)</li><li>XShell6 、XFTP6 </li><li>Navicat Premium 12 (低版本不支持连mongodb，所以请选择高一点的版本)</li></ul><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;起因：在网上搜索了挺久，都没找到让我很满意的项目学习，也买了好几个付费项目，看了一部分就会发现看不下去，发现很多问题，虽然说能学到一部分东西，但感觉这些项目只是为了快速赚钱搞的，项目结构不清晰、缺少项目相关的介绍文档、前后端项目代码不分离，代码也写</summary>
      
    
    
    
    <category term="全栈" scheme="https://yanxuewen.cn/categories/%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="全栈" scheme="https://yanxuewen.cn/tags/%E5%85%A8%E6%A0%88/"/>
    
    <category term="NodeJS" scheme="https://yanxuewen.cn/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Github + Hexo + Next 搭建个人博客网站</title>
    <link href="https://yanxuewen.cn/2020/09/29/BuildBlog/"/>
    <id>https://yanxuewen.cn/2020/09/29/BuildBlog/</id>
    <published>2020-09-29T03:49:31.522Z</published>
    <updated>2020-09-29T03:58:02.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>搭建原因：几年前一直在CSDN写博客，经常用心的写一篇文章结果过一段时间文章关联的图片全部丢失，给他们反馈无果，图片丢失找不回了。后面就转用印象笔记，几年下来记录了不上笔记，但是缺少一个互动的环节，不知道自己写的笔记有没有问题，没法与他人思想发生碰撞，想快速产生好的想法或者更好的解决方案，看到网上不少朋友都是写在自己的博客网站上，于是就决定自己也要搭一个，毕竟这样逼格更高一点。呵呵~  以下是我零碎2~3天搭自己博客网站的步骤，希望能给后面的人提供帮助。</p></blockquote><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><hr><h3 id="Github-创建博客仓库"><a href="#Github-创建博客仓库" class="headerlink" title="Github 创建博客仓库"></a>Github 创建博客仓库</h3><p>在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如：aa4790139.github.io</p><hr><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>在本机安装<a href="https://nodejs.org/zh-cn/download/">Node.js</a></p><hr><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;d&#x2F;Work&#x2F;Projects&#x2F;PotterBlog</span><br><span class="line">cd &#x2F;d&#x2F;Work&#x2F;Projects&#x2F;PotterBlog</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><hr><h3 id="初始化Hexo项目"><a href="#初始化Hexo项目" class="headerlink" title="初始化Hexo项目"></a>初始化Hexo项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><ul><li><p>如果出现以下情况报错：<br><img data-src="https://github.com/aa4790139/BlogPicBed/blob/master/img/1.png?raw=true" alt=""></p><p>  解决办法：关闭npm 的https</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set strict-ssl false</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="编译生成-amp-本地启动"><a href="#编译生成-amp-本地启动" class="headerlink" title="编译生成&amp;本地启动"></a>编译生成&amp;本地启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>等启动完后浏览器打开<a href="http://localhost:4000">http://localhost:4000</a>，看到hello world 博客页面，说明你成功）</p><hr><h3 id="切换主题为Next"><a href="#切换主题为Next" class="headerlink" title="切换主题为Next"></a>切换主题为Next</h3><ul><li><p>首先：clone next 主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure></li><li><p>其次：修改项目根目录下的 _config.yml，找到theme字段，更改为next即可</p></li><li><p>最后：修改主题next的默认的相关配置，主题配置文件路径：themes/next/_config.yml (<br>具体怎么配置看这篇文章相关部分即可：<a href="https://www.cxyxiaowu.com/6407.html">https://www.cxyxiaowu.com/6407.html</a> </p></li></ul><hr><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><ul><li><p>命令：(提示：运行如下命令后，文章会生成到source/_posts下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new hello-world</span><br></pre></td></tr></table></figure></li><li><p>文章开头格式规范：(提示：按此格式方便编译识别标题、时间、类别等)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标题 # 自动创建，如 hello-world</span><br><span class="line">tags: </span><br><span class="line">- 标签1</span><br><span class="line">- 标签2</span><br><span class="line">- 标签3</span><br><span class="line">categories:</span><br><span class="line">- 分类1</span><br><span class="line">- 分类2</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="创建Github-编写Markdown文章的图床"><a href="#创建Github-编写Markdown文章的图床" class="headerlink" title="创建Github 编写Markdown文章的图床"></a>创建Github 编写Markdown文章的图床</h3><ol><li>github 创建BlogPicBed 仓库</li><li><a href="https://docs.github.com/cn/github/authenticating-to-github/creating-a-personal-access-token">创建个人访问令牌</a></li><li><a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/113965016/bc669d80-3b9c-11ea-9c36-8274348f10a9?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200923%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20200923T014847Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=64a969201f2341629756cedfb055010b0262aec31d37fddc06c9fdf6ac56618a&amp;X-Amz-SignedHeaders=host&amp;actor_id=9338717&amp;key_id=0&amp;repo_id=113965016&amp;response-content-disposition=attachment%3B%20filename%3DPicGo-Setup-2.2.2.exe&amp;response-content-type=application%2Foctet-stream">下载PicGo</a> (目的：利用此工具上传图片至Github创建的BlogPicBed仓库中)</li><li>PicGo 配置成Github,如下图所示 <img data-src="https://github.com/aa4790139/BlogPicBed/blob/master/img/2.png?raw=true" alt=""></li><li>利用PicGo 上传一张图片，然后去BlogPicBed仓库的img文件夹找到你刚刚上传的图片，然后右键复制图片链接地址</li><li>使用Github 图床仓库的图片地址(提示：复制的图片地址是不带raw参数的，所以需要手动在地址后面拼”?raw=true” 否则图片不会显示)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：![](https:&#x2F;&#x2F;github.com&#x2F;aa4790139&#x2F;BlogPicBed&#x2F;blob&#x2F;master&#x2F;img&#x2F;2.png?raw&#x3D;true)</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="集成Gitalk"><a href="#集成Gitalk" class="headerlink" title="集成Gitalk"></a>集成Gitalk</h3><ol><li>获取GitHub OAuth授权(参考文章：<a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">GitHub OAuth 第三方登录示例教程</a>)</li><li>GitHub 创建留言仓库BlogGitTalk(注意：此仓库必须为公开仓库，不能为私有仓库)</li><li>themes/_config.yml 找到gitalk，配置如下样子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  github_id: github账号 # GitHub repo owner</span><br><span class="line">  repo: BlogGitTalk # Repository name to store issues</span><br><span class="line">  client_id: GitHub OAuth授权申请下来的client_id # GitHub Application Client ID</span><br><span class="line">  client_secret: GitHub OAuth授权申请下来的client_secret # GitHub Application Client Secret</span><br><span class="line">  admin_user: github账号 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="集成Valine"><a href="#集成Valine" class="headerlink" title="集成Valine"></a>集成Valine</h3><ol><li>注册leancloud账号<a href="https://www.leancloud.cn/"></a></li><li>leancloud 创建应用</li><li>themes/_config.yml 找到valine，配置如下样子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: leancloud 创建的应用AppID # Your leancloud application appid</span><br><span class="line">  appkey: leancloud 创建的应用appkey # Your leancloud application appkey</span><br><span class="line">  notify: false # Mail notifier</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: Just go go # Comment box placeholder</span><br><span class="line">  avatar: mm # Gravatar style</span><br><span class="line">  guest_info: nick,mail,link # Custom comment header</span><br><span class="line">  pageSize: 10 # Pagination size</span><br><span class="line">  language: zh-cn # Language, available values: en, zh-cn</span><br><span class="line">  visitor: true # Article reading statistic</span><br><span class="line">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class="line">  recordIP: false # Whether to record the commenter IP</span><br><span class="line">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class="line">  #post_meta_order: 0</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="部署至Github"><a href="#部署至Github" class="headerlink" title="部署至Github"></a>部署至Github</h3><ul><li>打开blog根目录下的_config.yml配置,找到Deployment, 配置参考如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:github用户名&#x2F;github用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li><p>安装hexo-deployer-git 部署插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>部署</p><ul><li>在根目录新建部署脚本deploy.sh，内容如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>运行部署命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh deploy.sh</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ol><li>阿里云购买域名: <a href="https://oss.console.aliyun.com/"></a></li><li>获取github上博客项目域名的ip<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping github用户名.github.io</span><br></pre></td></tr></table></figure></li><li>阿里云平台域名绑定博客域名ip(第2步ping出来的ip)<br><img data-src="https://github.com/aa4790139/BlogPicBed/blob/master/img/3.png?raw=true" alt=""></li></ol><hr><h3 id="版权配置"><a href="#版权配置" class="headerlink" title="版权配置"></a>版权配置</h3><ol><li>next/_config.yum 找到creative_commons</li><li>配置成如下样子：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true</span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="QQ交流平台："><a href="#QQ交流平台：" class="headerlink" title="QQ交流平台："></a>QQ交流平台：</h3><p>hexo next主题交流：1076692090</p><h3 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h3><ul><li><a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">Hexo博客搭建之在文章中插入图片</a></li><li><a href="https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/">Hexo使用攻略-添加分类及标签</a></li><li><a href="https://www.cnblogs.com/alex-zen/p/11203544.html#%E6%9C%AC%E5%9C%B0%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%8E%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87">Markdown必备-本地图片快速上传至图床</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/04/github-oauth.html">GitHub OAuth 第三方登录示例教程</a></li><li><a href="https://poplite.xyz/post/2018/05/03/how-to-enable-https-for-custom-domain-on-github-pages.html">Github Pages 开始为自定义域名提供 HTTPS 支持</a></li></ul><hr><h3 id="特别致谢："><a href="#特别致谢：" class="headerlink" title="特别致谢："></a>特别致谢：</h3><ul><li>cxyxiaowu ：<a href="https://www.cxyxiaowu.com/6407.html">https://www.cxyxiaowu.com/6407.html</a></li><li>Lining Wei ：<a href="https://weilining.github.io/">https://weilining.github.io/</a></li></ul><hr><blockquote><p>以上: 如发现有问题，欢迎留言指出，我及时更正</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;搭建原因：几年前一直在CSDN写博客，经常用心的写一篇文章结果过一段时间文章关联的图片全部丢失，给他们反馈无果，图片丢失找不回了。后面就转用印象笔记，几年下来记录了不上笔记，但是缺少一个互动的环节，不知道自己写的笔记有没有问题，没法与他人思想发生碰</summary>
      
    
    
    
    <category term="杂项" scheme="https://yanxuewen.cn/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
    <category term="Github" scheme="https://yanxuewen.cn/tags/Github/"/>
    
    <category term="Hexo" scheme="https://yanxuewen.cn/tags/Hexo/"/>
    
    <category term="Next" scheme="https://yanxuewen.cn/tags/Next/"/>
    
  </entry>
  
</feed>
